{"remainingRequest":"/Users/gilbert/Desktop/developpement-web/projets/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gilbert/Desktop/developpement-web/projets/portfolio/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gilbert/Desktop/developpement-web/projets/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gilbert/Desktop/developpement-web/projets/portfolio/src/views/Contact.vue?vue&type=template&id=df212a54&scoped=true&","dependencies":[{"path":"/Users/gilbert/Desktop/developpement-web/projets/portfolio/src/views/Contact.vue","mtime":1685694248612},{"path":"/Users/gilbert/Desktop/developpement-web/projets/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1685691683943},{"path":"/Users/gilbert/Desktop/developpement-web/projets/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1685691696129},{"path":"/Users/gilbert/Desktop/developpement-web/projets/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1685691683943},{"path":"/Users/gilbert/Desktop/developpement-web/projets/portfolio/node_modules/vue-loader/lib/index.js","mtime":1685691696128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}